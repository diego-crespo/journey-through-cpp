The Goal
1. Beginning c++ through game programming
2. C++ Primer
3. Sfml game development by example
4. Effective c++

* Introduction
** Chapter 1
Editor->Source->Compiler->ObjectCode->Linker->ExecutableFile

Linker links object files to any external files as necessary Then creates an
executable

#include <iostream> is called a preprocessor directive they always start with #

*preprocessor*- runs before the compiler and substitutes

surrounding with < > tells the compiler it can find the file amongst all the
other files that came with it

*header file*- A file that you include in your programs

*cout*-  is an object, defined in the file iostream. It sends data to the
standard output stream. Which in most programs is the console/terminal

*<<*- output operator. Used like a funnel. Funnels open side to pointy side

*>>*- extraction operator. Used with cin

*std*- is a namespace. Like an area code of a phone number

*::* scope resolution operator. You prefix a namespace with it

*using namespace ...*- a using directive, gives access to items in the std
namespace

*identifier*- name of a variable. Must only contain numbers, letters underscores.
Can't start with a number. Can't be a keyword (reserved word)

*cin >> fuel*- assing a value to fuel

Defining new names for types

- typdef unsigned short int ushort; defines ushort as another name for unsigned
short int.'

prefix-postfix- ++lives increments variable before the evaluation fo larger exp
IE ++lives * 10 increments lives before mult by 10. if added after then lives
won't be increased until after the operation.

*Common Types*
short int -32,768 to 32,767
unsigned short int 0 to 65,535
int -2,147,483,658 2,147,483,657
unsigned int 0 to 4,294,967,295
long int -2,147,483,648 to 2,147,483,647
unsigned long int
float 3.4e +/- 38(7 sig figs)
double 1.7E +/- 308 (15 sig figs)
long double 1.7E +/- 308 (15 sig figs)
char 256 character values
bool true or false

Legal Variables
- only numbers, letters, and underscores
- can't start with a number
- can't use a reserved keyword

** Chapter 2
Booleans
Any non-zero value can b interpreted as true
0 is interpreted as false

*Relational Operators*
| Operator | Meaning                  | Sample Expression | Evaluates To |
|----------+--------------------------+-------------------+--------------|
| ==       | equal to                 | 5==5              | true         |
|          |                          | 5 == 8            | false        |
| !=       | not equal to             | 5 != 8            | true         |
|          |                          | 5 != 5            | false        |
| >        | greater than             | 8 > 5             | true         |
|          |                          | 5 > 8             | false        |
| <        | less than                | 5 < 8             | true         |
|          |                          | 8 < 5             | flase        |
| >=       | greater than or equal to | 8 >= 5            | true         |
|          |                          | 5 >=8             | false        |
| <=       | less than or equal to    | 5 <= 8            | true         |
|          |                          | 8 <= 5            | false        |

The final else clause in an if else-if suite isn't required

*switch statement*- Test the value in the parenthesis against possible values
break and default are optional.
/Trap/ A switch statement can only be used to test an int. It won't work
with anything else

switch (choice)
{
  case value1:
         statement1;
         break;
  case value2:
         statement2;
         break;
  case value3:
         statement3;
         break;
              .
              .
              .
  case valueN:
         statementN;
         break;
  default: // if none of the values are true
         statement + 1;
}

*Do Loop*- Like a while loop, but loop body is always evaluated at least once

int main()
{
  do
    {
      statement;
    } while (condition);

  return 0;
}


Logical Operators

| Operator | Description | Sample Expression               |
|----------+-------------+---------------------------------|
| !        | Logical NOT | !expression                     |
| &&       | Logical AND | expression1&&expression2        |
| dbl pipe | Logical OR  | expression1 dblpipe expression2 |


<cstdlib> contains fucnions that deal with generating random numbers

rand function- generates an integer between 0 and at least 32767

srand(static_cast<unsigned int>(time(0))) seeds the random number generator at a given time
seeds the random number generator based on the time and date (time(0))

static_cast<unsigned int> converts value to unsigned int
any postive number divided by 6 will give a remainder between 0 and 5. so + 1 makes 1-6

enum var {choice1 choice 2} (evaluates to number)

any enumerators that are not assigned a value are given the value of the prev enumerator +1
** Chapter 3...

for loop structure
for (initialization; test; action)
    statement;

for (int i = 0; i < 10; ++i)
{
  body
}

for ( ; count < 10;)
{
  cout << count << " " ;
  ++count;

data member- A data element of an object

member function- Function of an object

(.)- Selection operator for accessing data members in objects.

(+)- Using the + operator to concatenate strings is called overloading

strings- strings are considered objects and have functions associated with them.

*Trap*
c++ compilers do not perform bounds checking when working with string objects
and the subscripting operator. This means that the compiler doesn't check to
see whether you're attempting to access an element that doesn't exist. Accessing
an invalid sequence element can lead to disastrous results because it's possible
to write over critical data in your computer's memory. By doing this, you can
crash your porgram, so take care when using the subscripting operator

*In this example*
for (unsigned int i = 0; i < phrase.size(); ++i)
// phrase.size returns an unsigned integral, so i is an unsigned int

*string::npos* - represents largest possible size of a string object so
it is greater than any possible valid postion number in a string obj.
Therefore it perfect return value to indicate that one string can't be
found in another

string.find()- specify substring to find. Can pass in an index to start from.

string.erase()- removes letters from a string starting from index, with 2nd
number specifying the amount of letters to remove

string.empty()- returns a bool value of true if string object is empty

Arrays- Create an array like declaring a variable. Declare the type, and give
it a maximum amount 

string inventory[] = {"sword", "armor", "shield"};

array[pos] = items;

Declaring a constant that is the size of an array can keep from accessing
items out of bounds of the array

C-style strings- char phrase[] = "Game Over!!!"; array that terminates
with a null character (\0)

*Trap* C-style strings are not resizeable dynamically, C++ string obj are

*Note*
- int and char are built in types, therefore you do not need to include them
Strings are not

- both length() and size() functions return same value so you can use either


predicate function- returns a bool value (true or false)
** Chapter 4

STL- (Standard Template Library) Powerful Collection of programming work that's been done well.
provides containers, iterators, and algorithms

container- let you store and access collections of values of the same type. They offer more
flexibility than arrays

vector- the vector class is a container defined by stl. It is a dynamic array. 
*Pros*
 - vectors can grow while arrays can not.
 - vectors can be used with STL algorithms, arrays cannot
*cons*
 - use more memory than arrays
 - there can be a performance cost

*hint*
You can declare a starting size for a vector by putting parenthesis after vector name
vector<string> inventory(10, "nothing")
STL lives in the std namespace

